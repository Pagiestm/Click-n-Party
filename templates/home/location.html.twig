{% extends 'base.html.twig' %}

{% block title %}Location - {{ location.getNom() }}{% endblock %}

{% block body %}
<div class="mx-auto xl:px-48 md:px-20">
    <h1>{{ location.getNom() }}</h1>
    <div class="flex justify-center">
        <div class="flex rounded-lg overflow-hidden h-80vh">
            <div class="w-1/2 aspect-w-1 aspect-h-1 mr-2">
                {% for image in location.images|slice(0, 1) %}
                    <img class="w-full h-full object-cover" src="{{ asset('uploads/' ~ image.Nom) }}" alt="{{ location.Nom }}">
                {% endfor %}
            </div>
            <div class="w-1/2 aspect-w-1 aspect-h-1 grid grid-cols-2 grid-rows-2 gap-2">
                {% for image in location.images|slice(1, 4) %}
                    <img class="w-full h-full object-cover" src="{{ asset('uploads/' ~ image.Nom) }}" alt="{{ location.Nom }}">
                {% endfor %}
            </div>
        </div>
    </div>                
    <p>Description: {{ location.getDescription() }}</p>
    <p>Prix: {{ location.getPrix() }} $ par jour</p>
    <p>Adresse: {{ location.getAdresse() }}</p>
    <p>Disponible du {{ location.getDateDebutDisponibilite()|date('d-m-Y') }} au {{ location.getDateFinDisponibilite()|date('d-m-Y') }}</p>
    <p>Capacité maximale: {{ location.getCapaciteMaximal() }}</p>
    <p>Accessible aux personnes à mobilité réduite: {{ location.isPMR() ? 'Oui' : 'Non' }}</p>
    <p>Actif: {{ location.isActif() ? 'Oui' : 'Non' }}</p>
    <p>Catégories: 
        {% for categorie in location.getCategories() %}
            {{ categorie.getLibelle() }}
        {% endfor %}
    </p>
    {{ form_start(reservationForm) }}
    {{ form_row(reservationForm.Date_debut, { 'id': 'dateDebut', 'type': 'hidden', 'attr': {'class': 'dateDebut'} }) }}
    {{ form_row(reservationForm.Date_fin, { 'id': 'dateFin', 'type': 'hidden', 'attr': {'class': 'dateFin'} }) }}
    <div id='calendar'></div>
    {{ form_row(reservationForm.NombresDeLocataires) }}
    <button type="submit" class="btn btn-primary">Réserver</button>
    {{ form_end(reservationForm) }}

    {% for message in app.flashes('error') %}
    <div class="alert alert-danger">
        {{ message }}
    </div>
    {% endfor %}
</div>

{% block javascripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Obtenir l'élément du calendrier dans le DOM
    let calendarEl = document.getElementById('calendar');
    // Initialise la date de début de la sélection à null
    let startDate = null;
    // ID de la sélection de l'utilisateur
    let userSelectionId = 'userSelection';
    // Création un nouvel objet de calendrier
    let calendar = new FullCalendar.Calendar(calendarEl, {
        // Calendrier en Français
        locale: 'fr',
        // vue mensuelle par défaut
        initialView: 'dayGridMonth',
        selectLongPressDelay: 50,
        // Rend le calendrier sélectionnable
        selectable: true,
        height: 'auto',
        // Définit la disposition de la barre d'outils du calendrier
        headerToolbar: {
            left: '',
            center: 'title',
            right: 'prev,next'
        },
        // Définition des événements du calendrier
        events: [
            // événement pour la période de non-disponibilité de la location
            {
                start: '{{ "now"|date('Y-m-d') }}',
                end: '{{ location.getDateFinDisponibilite()|date('Y-m-d', 'UTC') }}',
                rendering: 'background',
                color: '#808080',
                display: 'inverse-background',
                groupId: 'locations'
            },
            // événement pour chaque réservation
            {% for reservation in reservations %}
            {
                start: '{{ reservation.dateDebut|date('Y-m-d') }}',
                end: '{{ reservation.dateFin|date_modify('+1 day')|date('Y-m-d', 'UTC') }}',
                rendering: 'background',
                overlap: false,
                color: '#808080', 
                groupId: 'reservations'
            },
            {% endfor %}
        ],
        // fonction qui détermine si une sélection est autorisée
        selectAllow: function(selectInfo) {
            let events = calendar.getEvents();
            let isSelectionAllowed = true;
            events.forEach(function(event) {
                // Vérifie si l'événement est une réservation et si la date sélectionnée est dans la réservation
                if (event.groupId === 'reservations' && selectInfo.start < event.end && selectInfo.end > event.start) {
                    isSelectionAllowed = false;
                }
                // Vérifie si l'événement est une location et si la date sélectionnée est en dehors de la location
                else if (event.groupId === 'locations' && (selectInfo.start < event.start || selectInfo.end > event.end)) {
                    isSelectionAllowed = false;
                }
            });
            return isSelectionAllowed;
        },
        // fonction qui s'exécute lorsqu'une plage de dates est sélectionnée
        select: function(info) {
            let events = calendar.getEvents();
            let isSelectionAllowed = true;
            events.forEach(function(event) {
                // Vérifie si l'événement est une réservation et si la plage de dates sélectionnée chevauche la réservation
                if (event.groupId === 'reservations' && info.start < event.end && info.end > event.start) {
                    isSelectionAllowed = false;
                }
                // Vérifie si l'événement est une location et si la plage de dates sélectionnée est en dehors de la location
                else if (event.groupId === 'locations' && (info.start < event.start || info.end > event.end)) {
                    isSelectionAllowed = false;
                }
            });
            if (isSelectionAllowed) {
                // Définit la date de début et la date de fin à la plage de dates sélectionnée
                document.getElementById('dateDebut').value = info.startStr;
                // Soustrait une seconde de la date de fin
                let endDate = new Date(info.end);
                endDate.setSeconds(endDate.getSeconds() - 1);
                document.getElementById('dateFin').value = endDate.toISOString().split('T')[0];
                let oldSelection = calendar.getEventById(userSelectionId);
                if (oldSelection) {
                    oldSelection.remove();
                }
                calendar.addEvent({
                    id: userSelectionId,
                    start: info.startStr,
                    end: info.endStr,
                    color: '#0000FF'
                });
            }
        }
    });
    // Rendu du calendrier
    calendar.render();
});
</script>
{% endblock %}

{% endblock %}