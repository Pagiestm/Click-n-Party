{% extends 'base.html.twig' %}

{% block title %}Location - {{ location.getNom() }}{% endblock %}

{% block body %}
<div class="mx-auto md:py-4 xl:px-48 md:px-20 bg-custom-green">
    <div class="hidden md:flex items-center justify-between">
        <div class="ml-2 bg-custom-green flex items-center">
            <div class="w-10 h-10">
                <a href="{{ path('app_home') }}">
                    <img src="https://png.pngtree.com/png-clipart/20200721/original/pngtree-location-map-icon-green-png-image_4868185.jpg"
                        alt="Logo">
                </a>
            </div>
        </div>
        <div class="ml-auto flex items-center">
            {% if is_granted('IS_AUTHENTICATED_FULLY') %}
            {% include 'components/modal.html.twig' %}
            {% else %}
            <a href="/login"
                class="bg-custom_green_dark text-custom-green rounded-full font-bold py-2 px-4 md:h-8 lg:h-10 flex items-center justify-center">
                Connexion
            </a>
            {% endif %}
        </div>
    </div>
    <div class="md:flex md:flex-col">
        <h1 class="hidden md:block font-bold md:order-first text-2xl py-4">{{ location.getNom() }}</h1>
        <div class="hidden md:flex justify-between items-center mb-4">
            <div class="flex items-center">
                <i class="fas fa-star text-custom_boutton"></i>
                <p class="ml-1 font-cotorisHeavy">{{ noteMoyenne }}</p>
                <p class="bg-custom_green_dark text-custom-green font-cotorisHeavy rounded-full ml-2 px-2">{{ totalNotes }} avis</p>
            </div>
            <div class="flex items-center">
                <a href="https://www.facebook.com/sharer/sharer.php?u={{ app.request.uri }}" target="_blank" class="font-bold flex items-center">
                    <i class="fas fa-share-square mr-2"></i>
                    <span class="underline">Partager</span>
                </a>
                {% set isFavoris = false %}
                {% for favori in favoris %}
                    {% if favori.getLocations.id == location.id %}
                        {% set isFavoris = true %}
                    {% endif %}
                {% endfor %}
                {% if isFavoris %}
                    <svg xmlns="http://www.w3.org/2000/svg" fill="#053F31" class="z-10 add-favoris h-6 md:h-6 lg:h-8 mr-2 ml-4 cursor-pointer" viewbox="0 0 24 24" stroke="#053F31" data-location-id="{{ location.id }}">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
                    </svg>
                    <p class="font-bold">Sauvegarder</p>
                {% else %}
                    <svg xmlns="http://www.w3.org/2000/svg" fill="rgba(0, 0, 0, 0.5)" class="z-10 add-favoris h-6 md:h-6 lg:h-8 mr-2 ml-4 cursor-pointer" viewbox="0 0 24 24" stroke="white" data-location-id="{{ location.id }}">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
                    </svg>
                    <p class="font-bold">Sauvegarder</p>
                {% endif %}
            </div>
        </div>
        <div class="flex justify-center">
            <div class="hidden md:flex rounded-lg overflow-hidden w-full md:h-[350px] xl:h-[550px] 3xl:h-[750px] mb-2">
                <div class="w-1/2 aspect-w-1 aspect-h-1 mr-2 h-full">
                    {% for image in location.images|slice(0, 1) %}
                    <img class="w-full h-full object-cover" src="{{ asset('uploads/' ~ image.Nom) }}"
                        alt="{{ location.Nom }}">
                    {% endfor %}
                </div>
                <div class="w-1/2 aspect-w-1 aspect-h-1 grid grid-cols-2 grid-rows-2 gap-2 h-full">
                    {% for image in location.images|slice(1, 4) %}
                    <div class="relative">
                        <img class="w-full h-full object-cover" src="{{ asset('uploads/' ~ image.Nom) }}"
                            alt="{{ location.Nom }}">
                        {% if loop.index == 4 %}
                        <button id="openImagesModal"
                            class="md:py-1 md:px-2 md:text-xs lg:py-0.5 lg:px-3 py-2 px-4 lg:text-md xl:text-lg rounded-full bg-custom_green_dark font-cotorisHeavy text-custom-green w-fit-content absolute bottom-0 right-0 mb-2 mr-2">
                            Afficher les images
                        </button>
                        {% endif %}
                    </div>
                    {% endfor %}
                </div>
            </div>
        </div>
    </div>
    <!-- ModalImages -->
    <div id="imagesModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-[9999]">
        <div
            class="modal-content bg-white rounded-lg p-5 border w-1/2 h-[800px] overflow-auto scroll fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
            <h2 class="font-bold text-xl mb-4">Toutes les images</h2>
            <span id="closeImagesModal"
                class="text-gray-400 absolute top-0 right-0 m-2 text-4xl font-bold cursor-pointer hover:text-black focus:text-black">
                &times;
            </span>
            <div class="modal-body">
                <!-- Conteneur pour les images -->
                <div id="imagesContainer">
                    {% for image in location.images %}
                    <div class="image m-4 rounded">
                        <img class="w-full h-full rounded-lg object-cover" src="{{ asset('uploads/' ~ image.Nom) }}"
                            alt="{{ location.Nom }}">
                    </div>
                    {% endfor %}
                </div>
            </div>
        </div>
    </div>
    <div class="flex justify-between items-center md:hidden py-2">
        <a href="{{ path('app_home') }}" class="md:hidden flex items-center py-2">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="h-6 w-6">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
            Locations
        </a>
        <div class="flex items-center">
            <a href="https://www.facebook.com/sharer/sharer.php?u={{ app.request.uri }}" target="_blank" class="font-bold flex items-center">
                <i class="fas fa-share-square mr-2"></i>
            </a>
            {% if isFavoris %}
                <svg xmlns="http://www.w3.org/2000/svg" fill="#053F31" class="z-10 add-favoris h-6 md:h-6 lg:h-8 mr-4 ml-4 cursor-pointer" viewbox="0 0 24 24" stroke="#053F31" data-location-id="{{ location.id }}">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
                </svg>
            {% else %}
                <svg xmlns="http://www.w3.org/2000/svg" fill="rgba(0, 0, 0, 0.5)" class="z-10 add-favoris h-6 md:h-6 lg:h-8 mr-4 ml-4 cursor-pointer" viewbox="0 0 24 24" stroke="white" data-location-id="{{ location.id }}">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
                </svg>
            {% endif %}
        </div>
    </div>
    <div class="md:flex md:flex-col">
        <div class="swiper-container overflow-hidden md:hidden relative">
            <div class="swiper-wrapper">
                {% for image in location.images %}
                <div class="swiper-slide">
                    <img class="w-full h-[250px] object-cover" src="{{ asset('uploads/' ~ image.Nom) }}"
                        alt="{{ location.Nom }}">
                </div>
                {% endfor %}
            </div>
            <div style="color:#053F31;" class="swiper-button-next"></div>
            <div style="color:#053F31;" class="swiper-button-prev"></div>
            <h1 class="md:order-first text-xl font-semibold pl-4 pt-4">{{ location.getNom() }}</h1>
            <div class="flex items-center md:order-2 pl-4 pt-2">
                <i class="fas fa-star text-custom_boutton"></i>
                <p class="ml-1 font-cotorisHeavy">{{ noteMoyenne }}</p>
                <p class="bg-custom_green_dark text-custom-green font-cotorisHeavy rounded-full ml-2 px-2">{{ totalNotes }} avis</p>
            </div>
        </div>
    </div>
    <div class="flex flex-col lg:flex-row items-start mt-4 mx-4 sm:mx-0">
        <div class="flex-grow w-full lg:w-1/2">
            <p class="mb-2 text-base md:text-2xl font-semibold">{{ location.getAdresse() }}</p>
            <p class="mb-2 text-sm">{{ location.getCapaciteMaximal() }} participants · PMR : {{ location.isPMR() ? 'Oui'
                : 'Non' }}</p>

            <hr class="border-b border-gray-300 mb-4 mt-4">

            <p class="mb-2">Propriétaire: {{ location.getUtilisateurs().getPrenom() }}</p>
            <p class="mb-2">Prix: {{ location.getPrix() }} $ par jour</p>

            <hr class="border-b border-gray-300 mb-4 mt-4">

            {% if location.getDescription()|length > 500 %}
            <p class="mb-2">{{ location.getDescription()|slice(0, 500) }}... <br><br><a href="#"
                    id="openDescriptionButton" class="bg-custom_green_dark text-custom-green font-cotorisHeavy rounded-full font-bold py-1 px-4">Voir plus</a></p>

            <hr class="border-b border-gray-300 mb-4 mt-4">

            <!-- Description Modal -->
            <div id="descriptionModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-[9999]">
                <div
                    class="modal-content bg-white rounded-lg p-5 border w-4/5 h-[500px] overflow-auto scroll fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
                    <h2 class="font-bold text-xl mb-4">Description</h2>
                    <span id="closeDescriptionModal"
                        class="text-gray-400 absolute top-0 right-0 m-2 text-4xl font-bold cursor-pointer hover:text-black focus:text-black">
                        &times;
                    </span>
                    <div class="modal-body">
                        {{ location.getDescription() }}
                    </div>
                </div>
            </div>
            {% else %}
            <p class="mb-4">{{ location.getDescription() }}</p>
            {% endif %}

            <div id="mapid" class="rounded-xl h-96 2xl:h-[600px]"></div>

            <hr class="border-b border-gray-300 mb-4 mt-4 lg:hidden">
        </div>
        <div
            class="w-full sticky top-[20px] lg:w-2/5 xl:w-1/3 2xl:w-1/4 p-4 lg:ml-4 bg-white border border-custom_green_dark rounded-lg flex flex-col items-center justify-center">
            {% for message in app.flashes('error') %}
            <div class="alert alert-danger">
                {{ message }}
            </div>
            {% endfor %}
            {{ form_start(reservationForm, { 'attr': {'class': 'flex flex-col items-center justify-center'} }) }}
            {{ form_row(reservationForm.Date_debut, { 'id': 'dateDebut', 'type': 'hidden', 'attr': {'class':
            'dateDebut'} }) }}
            {{ form_row(reservationForm.Date_fin, { 'id': 'dateFin', 'type': 'hidden', 'attr': {'class': 'dateFin'} })
            }}
            <p class="mb-2 font-cotorisHeavy text-custom_green_dark">Disponible du {{ location.getDateDebutDisponibilite()|date('d-m-Y') }} au {{
                location.getDateFinDisponibilite()|date('d-m-Y') }}</p>
            <div id="calendar"></div>
            {{ form_row(reservationForm.NombresDeLocataires, { 'label': false, 'attr': { 'class': 'w-full
            bg-custom_green_dark text-custom-green font-cotorisHeavy rounded-full font-bold py-1 px-2 mb-2 flex
            items-center justify-center text-white' } }) }}
            <button type="submit"
                class="bg-custom_green_dark text-custom-green font-cotorisHeavy rounded-full font-bold py-1 px-4 flex items-center justify-center">Réserver</button>
            {{ form_end(reservationForm) }}
        </div>
    </div>

    <hr class="border-b border-gray-300 mb-6 mt-6 mx-4 sm:mx-0">

    <div class="bg-white rounded-lg p-4 mb-6 border border-custom_green_dark relative mx-4 sm:mx-0">
        {% if totalNotes == 0 %}
            <p class="text-center text-2xl font-bold text-custom_green_dark">Aucun commentaire pour cette location</p>
        {% else %}
            <div class="flex items-center mb-4">
                <i class="fas fa-star text-custom_boutton"></i>
                <span class="ml-1 font-bold text-lg">{{ noteMoyenne }} · {{ totalNotes }} Notes</span>
            </div>
            <h2 class="font-bold text-lg mb-2">Évaluation globale</h2>
            <div class="md:w-1/2 2xl:w-1/4">
                {% for note, nombre in statistiquesNotes %}
                <div class="flex items-center mb-2">
                    <span class="w-6">{{ note }}</span>
                    <div class="bg-gray-300 w-full h-2 rounded-full overflow-hidden">
                    {% if totalNotes > 0 %}
                        <div class="bg-custom_boutton h-full" style="width: {{ (nombre / totalNotes) * 100 }}%;"></div>
                    {% endif %}
                    </div>
                    <span class="ml-2">{{ ((nombre / totalNotes) * 100)|round }}%</span>
                </div>
                {% endfor %}
            </div>
        {% endif %}
    </div>

    {% if comments|length > 0 %}
    <div class="grid lg:grid-cols-2 2xl:grid-cols-3 gap-6 px-4 md:px-0 h-full comment-container">
        {% for comment in comments %}
        <div class="bg-white rounded-lg p-4 mb-2 border border-custom_green_dark relative comment" style="{{ loop.index > 2 ? 'display: none;' : '' }}">
            <div class="absolute top-2 right-2 flex items-center">
                <i class="fas fa-star text-custom_boutton"></i>
                <span class="ml-1 font-cotorisHeavy">{{ comment.getNoteProprietaires() }}</span>
            </div>
            <h3 class="font-bold text-lg mb-2">{{ comment.Utilisateurs.Prenom }}</h3>
            <p class="mb-2">{{ comment.Avis }}</p>
            <p class="text-sm text-gray-600">
                Note du loueur :
                {{ comment.getNoteLoueur() }}
            </p>
        </div>
        {% endfor %}
    </div>
    {% if comments|length > 3 %}
    <div class="flex flex-col items-center">
        <button id="loadMoreComments" class="bg-custom_green_dark text-custom-green font-cotorisHeavy rounded-full font-bold py-1 px-4 flex items-center justify-center mb-4">
            Afficher plus
        </button>
        <div id="loadingIndicator" style="display: none;">
            <img src="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/0.16.1/images/loader-large.gif" alt="Chargement...">
        </div>
    </div>
    {% endif %}
    {% endif %}

    {% include 'components/modalMobile.html.twig' %}
</div>

{% block javascripts %}
<script>

    document.addEventListener('DOMContentLoaded', () => {
        const comments = Array.from(document.querySelectorAll('.comment'));
        const loadMoreCommentsButton = document.getElementById('loadMoreComments');
        const loadingIndicator = document.getElementById('loadingIndicator');
    
        let currentCommentCount = comments.filter(comment => comment.style.display !== 'none').length;
    
        loadMoreCommentsButton.addEventListener('click', () => {
            loadingIndicator.style.display = 'block';
    
            const nextComments = comments.slice(currentCommentCount, currentCommentCount + 2);
            nextComments.forEach(comment => comment.style.display = 'block');
            currentCommentCount += nextComments.length;
    
            if (currentCommentCount >= comments.length) {
                loadMoreCommentsButton.style.display = 'none';
            }
    
            loadingIndicator.style.display = 'none';
        });
    });
    
    document.addEventListener('DOMContentLoaded', () => {
        // Fonction pour obtenir toutes les dates entre deux dates
        function getDatesBetween(startDate, endDate) {
            const dates = [];
            let currentDate = startDate;
            while (currentDate <= endDate) {
                dates.push(new Date(currentDate));
                currentDate.setDate(currentDate.getDate() + 1);
            }
            return dates;
        }

        // Fonction pour comparer uniquement les parties année, mois et jour de deux dates
        function areDatesEqual(date1, date2) {
            return date1.getFullYear() === date2.getFullYear() &&
                date1.getMonth() === date2.getMonth() &&
                date1.getDate() === date2.getDate();
        }

        const options = {
            settings: {
                lang: 'fr',
                selection: {
                    day: 'multiple-ranged',
                },
                visibility: {
                    theme: 'light',
                    disabled: true,
                },
                range: {
                    min: '{{ location.getDateDebutDisponibilite()|date('Y-m-d') }}',
                    max: '{{ location.getDateFinDisponibilite()|date('Y-m-d') }}',
            disabled: [
                {% for reservation in reservations %}
                    '{{ reservation.dateDebut|date('Y-m-d') }}:{{ reservation.dateFin|date('Y-m-d') }}'{% if not loop.last %}, {% endif %}
                {% endfor %}
            ],
        },
        },
        actions: {
        clickDay(event, self) {
            // Mettre à jour les champs de formulaire avec les dates sélectionnées
            if (self.selectedDates.length > 0) {
                // Vérifier si la plage de dates sélectionnée inclut des dates désactivées
                const disabledDates = self.settings.range.disabled.flatMap(range => {
                    const [start, end] = range.split(':');
                    return getDatesBetween(new Date(start), new Date(end));
                });
                const selectedRange = getDatesBetween(new Date(self.selectedDates[0]), new Date(self.selectedDates[self.selectedDates.length - 1]));
                if (selectedRange.some(selectedDate => disabledDates.some(disabledDate => areDatesEqual(selectedDate, disabledDate)))) {
                    // Réinitialiser la sélection si la plage de dates sélectionnée inclut des dates désactivées
                    self.selectedDates = [];
                    return;
                }

                document.getElementById('dateDebut').value = self.selectedDates[0];
                if (self.selectedDates.length > 1) {
                    document.getElementById('dateFin').value = self.selectedDates[self.selectedDates.length - 1];
                }
            }
        },
    },
    };

    const calendar = new VanillaCalendar('#calendar', options);
    calendar.init();
    });

    // OpenStreetMap
    window.onload = function () {
        // adresse de la location à partir de l'objet location
        let address = "{{ location.getAdresse() }}";
    
        // Envoie une requête GET à l'API de géocodage de OpenStreetMap avec l'adresse de la location
        $.get('https://nominatim.openstreetmap.org/search?format=json&q=' + address, function (data) {
            // Vérifie si l'API a renvoyé des données
            if (data.length > 0) {
                // Initialisation de la carte avec les coordonnées de l'adresse et un niveau de zoom de 13
                let map = L.map('mapid').setView([data[0].lat, data[0].lon], 13);
    
                // Tuiles sur la carte en utilisant les tuiles de OpenStreetMap
                L.tileLayer('https://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png', {
                    maxZoom: 19,
                }).addTo(map);
    
                // Marqueur sur la carte aux coordonnées de l'adresse
                L.marker([data[0].lat, data[0].lon]).addTo(map)
                    // Infobulle au marqueur avec l'adresse de la location
                    .bindPopup("<b>{{ location.getAdresse() }}</b>").openPopup();
            } else {
                // Si l'API n'a pas renvoyé de données, cache la div qui contient la carte
                document.getElementById('mapid').style.display = 'none';
            }
        });
    }
</script>
{% endblock %}

{% endblock %}